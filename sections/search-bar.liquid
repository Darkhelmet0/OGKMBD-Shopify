<div class="search-bar bg-bone">
    <div class="page-width">
        {% if section.settings.title != blank %}
          <h2>{{ section.settings.title }}</h2>
        {% endif %}
        {% if section.settings.description != blank %}
          <div class="search-bar-description">{{ section.settings.description }}</div>
        {% endif %}
        <form action="{{ routes.search_url }}" method="get" role="search" class="search-form">
            <input type="hidden" name="type" value="{{ section.settings.search_type }}">
            <input type="search" name="q" value="{{ search.terms | escape }}" placeholder="{{ section.settings.placeholder_text }}" class="search-input" data-predictive-search-input>
            <button type="submit" class="button search-btn ">{{ section.settings.search-button-text }}</button>
        </form>
        {% if section.settings.subtitle != blank %}
        <h3>{{ section.settings.subtitle }}</h3>
        <div class="search-suggestions-wrap">
            <div class="default-suggestions-list"> 
              {% for block in section.blocks %}
                <div class="search-suggestion">
                  <a href="{{ block.settings.link_url }}">{{ block.settings.link_title }}</a>
                </div>
              {% endfor %}
            </div>
            <div class="predictive-search-results" data-predictive-search-results></div> 
        </div>
        {% endif %}
        
    </div>
</div>

{% schema %}
{
  "name": "Search Bar",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Stop Overpaying For Braces And Supports."
    },
    {
      "type": "text",
      "id": "search-button-text",
      "label": "Search Button Text",
      "default": "Search Catalog"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "Description",
      "default": "<p>Search for the products you need:</p>"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Popular Searches"
    },
    {
      "type": "select",
      "id": "search_type",
      "label": "Search Type",
      "options": [
        {
          "value": "",
          "label": "All"
        },
        {
          "value": "article",
          "label": "Blog Posts"
        },
        {
          "value": "page",
          "label": "Pages"
        },
        {
          "value": "product",
          "label": "Products"
        }
      ],
      "default": ""
    },
    {
      "type": "text",
      "id": "placeholder_text",
      "label": "Placeholder Text",
      "default": "Brace, Body Part, HCPCS Code..."
    }
  ],
  "blocks": [
    {
      "type": "link",
      "name": "Link",
      "settings": [
        {
          "id": "link_title",
          "type": "text",
          "label": "Link Title"
        },
        {
          "id": "link_url",
          "type": "url",
          "label": "Link URL"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Search Bar",
      "blocks": [
        {
          "type": "link"
        },
        {
          "type": "link"
        }
      ]
    }
  ]
}
{% endschema %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.querySelector('.search-input');
  const predictiveSearchResults = document.querySelector('.predictive-search-results');
  const searchType = '{{ section.settings.search_type | default: "product,article,page" }}';

  if (!predictiveSearchResults) {
    return;
  }

  function hyphenateString(str) {
    return str.toLowerCase().replace(/\s+/g, '-');
  }

  searchInput.addEventListener('input', function() {
    const searchTerm = this.value.trim();
    if (searchTerm.length > 2) {
      fetch(`/search/suggest.json?q=${encodeURIComponent(searchTerm)}&resources[type]=${searchType}&resources[options][fields]=body,title,product_type`)
        .then(response => response.json())
        .then(data => {
          console.log(data);
          predictiveSearchResults.innerHTML = '';
          const products = data.resources.results.products;
          const articles = data.resources.results.articles;
          const pages = data.resources.results.pages;
          let resultscheck = false;
          const displayedMatches = new Set();

          if (products && products.length > 0) {
            products.forEach(product => {
              console.log(product);
              const listItem = document.createElement('div');
              listItem.classList.add('search-suggestion');
              listItem.classList.add('product-search-suggestion');

              let matchedText = '';
              let matchType = '';
              if (product.title.toLowerCase().includes(searchTerm.toLowerCase())) {
                matchedText = product.title;
                matchType = 'title';
              } else if (product.type && product.type.toLowerCase().includes(searchTerm.toLowerCase())) {
                matchedText = product.type;
                matchType = 'product_type';
              } else {
                const productMetaSpan = document.createElement('span');
                productMetaSpan.innerHTML = product.body;
                const productMetaText = productMetaSpan.querySelector('.product-meta-for-search');
                if (productMetaText && productMetaText.textContent.toLowerCase().includes(searchTerm.toLowerCase())) {
                  const startIndex = productMetaText.textContent.toLowerCase().indexOf(searchTerm.toLowerCase());
                  const endIndex = productMetaText.textContent.indexOf(' ', startIndex + searchTerm.length);
                  matchedText = productMetaText.textContent.substring(startIndex, endIndex !== -1 ? endIndex : productMetaText.textContent.length);
                  matchType = 'body';
                }
              }

              if (matchedText && !displayedMatches.has(matchedText)) {
                displayedMatches.add(matchedText);
                let url = '';
                if (matchType === 'title') {
                  url = product.url;
                } else if (matchType === 'product_type') {
                  const hyphenatedProductType = hyphenateString(matchedText);
                  url = `/collections/${hyphenatedProductType}`;
                } else {
                  url = `/search?type=product&q=${encodeURIComponent(matchedText)}`;
                }
                listItem.innerHTML = `<a href="${url}">${matchedText}</a>`;
                predictiveSearchResults.appendChild(listItem);
                resultscheck = true;
              }
            });
          }

          if (articles && articles.length > 0) {
            articles.forEach(article => {
              const listItem = document.createElement('div');
              listItem.classList.add('search-suggestion');
              listItem.classList.add('article-search-suggestion');

              let matchedText = '';
              if (article.title.toLowerCase().includes(searchTerm.toLowerCase())) {
                matchedText = article.title;
              } else if (article.body.toLowerCase().includes(searchTerm.toLowerCase())) {
                const startIndex = article.body.toLowerCase().indexOf(searchTerm.toLowerCase());
                const endIndex = article.body.indexOf(' ', startIndex + searchTerm.length);
                matchedText = article.body.substring(startIndex, endIndex !== -1 ? endIndex : article.body.length);
              }

              if (matchedText && !displayedMatches.has(matchedText)) {
                displayedMatches.add(matchedText);
                listItem.innerHTML = `<a href="${matchedText === article.title ? article.url : `/search?type=article&q=${encodeURIComponent(matchedText)}`}">${matchedText}</a>`;
                predictiveSearchResults.appendChild(listItem);
                resultscheck = true;
              }
            });
          }

          if (pages && pages.length > 0) {
            pages.forEach(page => {
              const listItem = document.createElement('div');
              listItem.classList.add('search-suggestion');
              listItem.classList.add('page-search-suggestion');
 
              let matchedText = '';
              if (page.title.toLowerCase().includes(searchTerm.toLowerCase())) {
                matchedText = page.title;
              } else if (page.body.toLowerCase().includes(searchTerm.toLowerCase())) {
                const startIndex = page.body.toLowerCase().indexOf(searchTerm.toLowerCase());
                const endIndex = page.body.indexOf(' ', startIndex + searchTerm.length);
                matchedText = page.body.substring(startIndex, endIndex !== -1 ? endIndex : page.body.length);
              }

              if (matchedText && !displayedMatches.has(matchedText)) {
                displayedMatches.add(matchedText);
                listItem.innerHTML = `<a href="${matchedText === page.title ? page.url : `/search?type=page&q=${encodeURIComponent(matchedText)}`}">${matchedText}</a>`;
                predictiveSearchResults.appendChild(listItem);
                resultscheck = true;
              }
            });
          }

          return resultscheck;
        })
        .then((resultscheck) => {
          if (resultscheck) {
            document.querySelector('.default-suggestions-list').style.display = 'none';
          } else {
            document.querySelector('.default-suggestions-list').style.display = 'flex';
          }
        });
    } else {
      predictiveSearchResults.innerHTML = '';
      document.querySelector('.default-suggestions-list').style.display = 'flex';
    }
  });
});
</script>