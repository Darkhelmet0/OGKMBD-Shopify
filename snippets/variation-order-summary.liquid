<div class="variation-order-summary">
  <style>
    .variant-price-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
      max-width: 470px;
      border-radius: 8px;
    }
    .variant-price-table th, .variant-price-table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: center;
    }
    .variant-price-table th {
      background-color: rgba(28, 0, 56, 0.05);
      color: #7460DE;
    }
  </style>

  {% assign size_variants = product.variants | map: 'option1' | uniq %}
  {% assign side_variants = product.variants | map: 'option2' | uniq %}

  <table class="variant-price-table" data-product-id="{{ product.id }}">
    <thead>
      <tr>
        <th></th>
        {% for size in size_variants %}
          <th data-size="{{ size }}">{{ size }}</th>
        {% endfor %}
      </tr>
    </thead>
    <tbody>
      {% for side in side_variants %}
        <tr>
          <th data-side="{{ side }}">{{ side }}</th>
          {% for size in size_variants %}
            {% assign current_variant = product.variants | where: "option1", size | where: "option2", side | first %}
            <td 
              data-variant-id="{{ current_variant.id | default: 'unavailable' }}"
              data-price="{{ current_variant.price | default: '' }}"
              data-size="{{ size }}"
              data-side="{{ side }}"
            >
              {% if current_variant %}
              <div class="variant-vals-wrapper opacity-zero">
               <span class="variation-quantity">0</span><span class='multiplier'>x</span><span class="variation-price">{{ current_variant.price | money_without_trailing_zeros }}</span> 
              </div>
               {% else %}
                N/A
              {% endif %}
            </td>
          {% endfor %}
        </tr>
      {% endfor %}
    </tbody>
  </table>

  <script>
    function updateQuantities() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {

          console.log('update-qty return',  cart);
          if(cart.item_count == 0) {

            console.log('no items in cart');
            document.getElementById("cart-icon-bubble").innerHTML =  `Cart <span aria-hidden="true">&nbsp;(0)</span>`;
          }
          const variantQuantities = {};
          
          // Create a map of variant IDs to quantities
          cart.items.forEach(item => {
            variantQuantities[item.variant_id] = item.quantity;
          });

          // Update quantities in the table
          const cells = document.querySelectorAll('.variant-price-table td');
          cells.forEach(cell => {
            const variantId = cell.dataset.variantId;
            cell.setAttribute('data-cartquantity', variantQuantities[variantId] || 0);
          });

          inputsIsoUpdate();
        })
        .catch(error => console.error('Error fetching cart:', error));
        
    }

    // Function to set up event listeners
    function setupEventListeners() {
      // Listen for cart updates
      document.addEventListener('cart:updated', updateQuantities);
      
      // Listen for add to cart button clicks
      const addToCartButtons = document.querySelectorAll('form[action="/cart/add"] button[type="submit"]');
      addToCartButtons.forEach(button => {
        button.addEventListener('click', () => {
          // Wait a short time for the cart to update before refreshing quantities
          setTimeout(updateQuantities, 500);
        });
      });

      // Listen for Ajax API requests (for themes using Shopify's Ajax API)
      const originalFetch = window.fetch;
      window.fetch = function(...args) {
        const result = originalFetch.apply(this, args);
        if (args[0] && typeof args[0] === 'string' && args[0].includes('/cart/add')) {
          result.then(() => {
            setTimeout(updateQuantities, 500);
          });
        }
        return result;
      };
    }

    // Call updateQuantities on page load
    document.addEventListener('DOMContentLoaded', () => {
      updateQuantities();
      setupEventListeners();
    });

    // If using Shopify's sections:load event (for section rendering)
    document.addEventListener('shopify:section:load', setupEventListeners);
  </script>
</div>